// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Overview

// Input device configuration.
// Find the full list of options on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input
input {
    keyboard {
        xkb {
            // You can set rules, model, layout, variant and options.
            // For more information, see xkeyboard-config(7).

            // For example:
            // layout "us,ru"
            // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"
        }
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    touchpad {
        tap
        // dwt
        // dwtp
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
    }

    mouse {
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
    }

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    // focus-follows-mouse
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Outputs
// Remember to uncomment the node by removing "/-"!
output "eDP-1" {
    // Uncomment this line to disable this output.
    // off

    // Resolution and, optionally, refresh rate of the output.
    // The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
    // If the refresh rate is omitted, niri will pick the highest refresh rate
    // for the resolution.
    // If the mode is omitted altogether or is invalid, niri will pick one automatically.
    // Run `niri msg outputs` while inside a niri instance to list all outputs and their modes.
    mode "1920x1200@60.001"

    // Scale is a floating-point number, but at the moment only integer values work.
    scale 1.0

    // Transform allows to rotate the output counter-clockwise, valid values are:
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    transform "normal"

    // Position of the output in the global coordinate space.
    // This affects directional monitor actions like "focus-monitor-left", and cursor movement.
    // The cursor can only move between directly adjacent outputs.
    // Output scale and rotation has to be taken into account for positioning:
    // outputs are sized in logical, or scaled, pixels.
    // For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
    // so to put another output directly adjacent to it on the right, set its x to 1920.
    // If the position is unset or results in an overlap, the output is instead placed
    // automatically.
    position x=0 y=0
}

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout
layout {
    // Set gaps around windows in logical pixels.
    gaps 4

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.
    center-focused-column "always"

    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        // Proportion sets the width as a fraction of the output width, taking gaps into account.
        // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
        // The default preset widths are 1/3, 1/2 and 2/3 of the output.
		proportion 0.9

        // Fixed sets the width in logical pixels exactly.
        fixed 1920
    }

    // You can change the default width of the new windows.
    default-column-width { proportion 0.75;}
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    // default-column-width {}

    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you don't like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.
    //
    // Alternatively, you can override it with a window rule called
    // `draw-border-with-background`.

    // You can change how the focus ring looks.
    focus-ring {
        // Uncomment this line to disable the focus ring.
        off

        // How many logical pixels the ring extends out from the windows.
        width 4

        // Colors can be set in a variety of ways:
        // - CSS named colors: "red"
        // - RGB hex: "#rgb", "#rgba", "#rrggbb", "#rrggbbaa"
        // - CSS-like notation: "rgb(255, 127, 0)", rgba(), hsl() and a few others.

        // Color of the ring on the active monitor.
        active-color "mediumslateblue"

        // Color of the ring on inactive monitors.
        // inactive-color "#505050"

        // You can also use gradients. They take precedence over solid colors.
        // Gradients are rendered the same as CSS linear-gradient(angle, from, to).
        // The angle is the same as in linear-gradient, and is optional,
        // defaulting to 180 (top-to-bottom gradient).
        // You can use any CSS linear-gradient tool on the web to set these up.
        //
        // active-gradient from="#80c8ff" to="#bbddff" angle=45

        // You can also color the gradient relative to the entire view
        // of the workspace, rather than relative to just the window itself.
        // To do that, set relative-to="workspace-view".
        //
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // You can also add a border. It's similar to the focus ring, but always visible.
    border {
        // The settings are the same as for the focus ring.
        // If you enable the border, you probably want to disable the focus ring.
        off

        // width 4
        // active-color "#ffc87f"
        // inactive-color "#505050"

        // active-gradient from="#ffbb66" to="#ffc880" angle=45 relative-to="workspace-view"
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        // left 64
        // right 64
        // top 25
        // bottom 25
    }
}

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// spawn-at-startup "alacritty" "-e" "fish"

spawn-at-startup "waybar"
spawn-at-startup "nm-applet"
spawn-at-startup "ibus" "start"
spawn-at-startup "lxpolkit"


// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some rounded corners.
prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Animation settings.
// The wiki explains how to configure individual animations:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
animations {
    // Uncomment to turn off all animations.
    off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    //slowdown 0.5
}

// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules

// Work around WezTerm's initial configure bug
// by setting an empty default-column-width.
window-rule {
    // This regular expression is intentionally made as specific as possible,
    // since this is the default config, and we want no false positives.
    // You can get away with just app-id="wezterm" if you want.
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}

// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}

binds {
    
    // Keys consist of modifiers separated by + signs, followed by an XKB key name
    // in the end. To find an XKB name for a particular key, you may use a program
    // like wev.
    //
    // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
    // when running as a winit window.
    //
    // Most actions that you can bind here can also be invoked programmatically with
    // `niri msg action do-something`.
    
    // Services
    Alt+Slash { show-hotkey-overlay; } // shows a list of important hotkeys.
    Alt+Escape{ spawn "physlock"; }
    Alt+D{ spawn "wofi" "-i" "-S" "drun"; }
    Alt+R{ spawn "wofi" "-i" "-S" "run"; } 
    
    Alt+Space{ maximize-column; }
    Alt+F{ fullscreen-window; }
    //Mod+R { switch-preset-column-width; }
    //Ctrl+Space { center-column; }

    // Logout With Confirmation
    Alt+Shift+E{ quit; }

    // Power Off Monitors
    Alt+Shift+P{ power-off-monitors; }
    
    // Screeshots
    Alt+P{ screenshot; }
    Print{ screenshot; }
    Ctrl+P{ screenshot-screen; }
    Ctrl+Print{ screenshot-screen; }
    Super+P{ screenshot-window; }
    Super+Print{ screenshot-window; }
    
	// Apps
    Super+Return { spawn "kitty"; }
    Super+G{ spawn "geany";}
    Super+V{ spawn "code"; }
    Super+T{ spawn "tetrio-desktop"; }
	Super+D{ spawn "vesktop"; }
	Super+F{ spawn "waterfox"; }
	Super+E{ spawn "nemo"; }
	Super+M{ spawn "spotify-launcher,code"; }
	Super+B{ spawn "blueman-manager"; }
	Super+A{ spawn "pavucontrol"; }
    
    // Xwayland
    alt+N{spawn "Xwayland";}
    alt+M{spawn "env" "DISPLAY=:0" "bspwm"; }
    
    // Xwayland Apps
    Super+S{ spawn "env" "DISPLAY=:0" "steam"; }
    Super+L{ spawn "env" "DISPLAY=:0" "lorien"; }
    
    // You can also use a shell:
    //Mod+T { spawn "bash" "-c" "notify-send hello && exec alacritty"; }

    // Sound
    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
    
    // Brightness
    XF86MonBrightnessUp		allow-when-locked=true { spawn "brightnessctl" "set" "5%+" "-q"; }
    XF86MonBrightnessDown	allow-when-locked=true { spawn "brightnessctl" "set" "5%-" "-q"; }
    
	// Navigation
    Alt+C 			{ close-window; }
	Alt+H			{ focus-workspace-up; }
    Alt+J			{ focus-column-left; }
    Alt+K   		{ focus-workspace-down; }
    Alt+L   		{ focus-column-right; }
    
	Shift+WheelScrollUp			cooldown-ms=200		{ focus-workspace-up; }
    Shift+WheelScrollLeft		cooldown-ms=200		{ focus-column-left; }
    Shift+WheelScrollDown   	cooldown-ms=200		{ focus-workspace-down; }
    Shift+WheelScrollRight   	cooldown-ms=200		{ focus-column-right; }
    
    Alt+Y 			{ move-column-to-workspace-up; }
	Alt+U 			{ move-column-left; }
	Alt+I 			{ move-column-to-workspace-down; }
    Alt+O 			{ move-column-right; }
    
    Alt+TouchpadScrollUp		cooldown-ms=200		{ move-column-to-workspace-up; }
    Alt+TouchpadScrollLeft		cooldown-ms=200		{ move-column-left; }
    Alt+TouchpadScrollDown		cooldown-ms=200		{ move-column-to-workspace-down; }
    Alt+TouchpadScrollRight		cooldown-ms=200		{ move-column-right; }
    
    Alt+WheelScrollUp		cooldown-ms=200		{ move-column-to-workspace-up; }
    Alt+WheelScrollLeft		cooldown-ms=200		{ move-column-left; }
    Alt+WheelScrollDown		cooldown-ms=200		{ move-column-to-workspace-down; }
    Alt+WheelScrollRight	cooldown-ms=200		{ move-column-right; }
    
	Alt+Shift+H 	{ move-column-to-monitor-left; }
    Alt+Shift+J		{ focus-monitor-left; }
    Alt+Shift+K 	{ move-column-to-monitor-right; }
    Alt+Shift+L		{ focus-monitor-right; }

    Super+TouchpadScrollUp 	cooldown-ms=25		{ spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "5%+"; }
    Super+TouchpadScrollDown	cooldown-ms=25		{ spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "5%-"; }
    
    Super+WheelScrollUp 	cooldown-ms=25		{ spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "5%+"; }
    Super+WheelScrollDown	cooldown-ms=25		{ spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "%5-"; }

	// Move To Workspaces Directly
    //Mod+1 { focus-workspace 1; }
    //Mod+Ctrl+1 { move-column-to-workspace 1; }
    //Mod+Ctrl+1 { move-window-to-workspace 1; }

    // Switches focus between the current and the previous workspace.
    //Mod+Tab { focus-workspace-previous; }

    // There are also commands that consume or expel a single window to the side.
    //Alt+Comma 	{ consume-or-expel-window-left; }
    //Alt+Period	{ consume-or-expel-window-right; }
    //Ctrl+N  { consume-window-into-column; }
    //Ctrl+M { expel-window-from-column; }

    // Finer width adjustments.
    // This command can also:
    // * set width in pixels: "1000"
    // * adjust width in pixels: "-5" or "+5"
    // * set width as a percentage of screen width: "25%"
    // * adjust width as a percentage of screen width: "-10%" or "+10%"
    // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
    // set-column-width "100" will make the column occupy 200 physical screen pixels.
    // Mod+Minus { set-column-width "-10%"; }
    // Mod+Equal { set-column-width "+10%"; }

    // Finer height adjustments when in column with other windows.
    // Mod+Shift+Minus { set-window-height "-10%"; }
    // Mod+Shift+Equal { set-window-height "+10%"; }

    // Actions to switch layouts.
    // Note: if you uncomment these, make sure you do NOT have
    // a matching layout switch hotkey configured in xkb options above.
    // Having both at once on the same hotkey will break the switching,
    // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }
}
